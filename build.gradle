buildscript {
    repositories {
        mavenCentral()
        jcenter()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.13.2"
        classpath "io.eventuate.plugins.gradle:eventuate-plugins-gradle-publish:$eventuatePluginsGradleVersion"
    }
}

apply plugin: 'docker-compose'
apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublish"

allprojects {
    group = "io.eventuate.messaging.kafka"
}

subprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        jcenter()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }

    dependencies {
        compile 'io.quarkus:quarkus-core'
        compile 'io.quarkus.arc:arc'
        compile 'io.quarkus:quarkus-arc-deployment'

        implementation enforcedPlatform("io.quarkus:quarkus-bom:${quarkusVersion}")
    }
}

gradle.projectsEvaluated {
    task aggregateJavaDocs(type: Javadoc) {
        description = 'Aggregated Javadoc API documentation of all subprojects.'
        group = JavaBasePlugin.DOCUMENTATION_GROUP
        dependsOn subprojects.findAll { subproject -> subproject.plugins.hasPlugin(PublicModulePlugin) }.javadoc

        source subprojects.findAll { subproject -> subproject.plugins.hasPlugin(PublicModulePlugin) }.javadoc.source
        destinationDir file("$buildDir/docs/javadoc")
        classpath = files(subprojects.findAll { subproject -> subproject.plugins.hasPlugin(PublicModulePlugin) }.javadoc.classpath)
    }
}

dockerCompose {
    projectName = null
}



